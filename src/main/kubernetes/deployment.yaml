# Deployments exist to help manage the release of new versions of your application. 
# They transcend the application's 'version' and allow you to move easily from one version to another.
# Deployments support 'rollout' and 'zero-downtime' and can stop deployment if porblems occur.
# Deployments manage ReplicaSets.
# Recreate strategy updates the ReplicaSet with the new image and kills existing pods so that they get recreated (downtime).
# RollingUpdate updates the pods a few at a time while still receiving traffic so there's no downtime.
# maxUnavailable '25%' means that 25% of the pods will be lost and upgraded at a time.
# maxSurge '20%' means adding additional capacity temporarily and maintain the existing capacity for the rest of the rollout.
# Patterns: - maxSurge: 100% is effectively a blue/green deployment as 100% new pods are created and then old pods killed.
# Patterns: - maxUnavailable: 0% is essentially maintaining the existing capacity and only using surge capacity for the update

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: mydeployment
  namespace: default
  labels:
    app: springboot-demo
spec: # this is the spec for the deployment (inc. things like replicas and how to rollout updates)
  replicas: 1 # bring up and maintain n replicas of the pod
  revisionHistoryLimit: 10 # keep only the last 10 entries in the rollout history
  minReadySeconds: 60 # wait until the first pod has been healthy for 60 seconds before rolling out the next one
  progressDeadlineSeconds: 300 # should take no more than 300 seconds per individual pod, otherwise fail the deployment.
  selector: # select the app for the deployment
    matchLabels: # match the labels 'app=speingboot-demo'
      app: springboot-demo 
  strategy: # will be one of either Recreate or RollingUpdate
    rollingUpdate: # we will use the rollingUpdate method (allows blue/green etc.)
      maxSurge: 100% # adds additional pods temporarily so we can maintain our existing capacity (can be %)
      maxUnavailable: 0% # specifies how many pods can be killed and upgraded at a time (can be %).
    type: RollingUpdate
  template: # this is the spec for the pods deployed as part of the deployment
    metadata:
      annotations:
        kubernetes.io/change-cause: "Deploying springboot-demo to v0.0.1-SNAPSHOT" # Update reason shows up in 'kubectl rollout history deployments xxx'
      labels: # label the app
        app: springboot-demo
        version: "0.0.1-SNAPSHOT" # This is just a label, changing it doesn't update the running version
    spec: # this is the Pod specification template
      containers: # specify the container types (inc. how they're monitored for health) 
      - name: springboot-demo
        image: benwilcock/pcf-springboot-demo:0.0.1-SNAPSHOT # specify the Docker image (you can change versions here)
        imagePullPolicy: IfNotPresent # Would be 'Always' by default, but this can cause extra pulls
        ports: # specify the ports to expose
        - containerPort: 8080 # expose the app on port 8080 in the pod
          protocol: TCP # use the TCP protocol (default, alternative is UDP)
        livenessProbe: # checks if the container (in the pod) is healthy
          httpGet: # this probe will use the http GET method
            path: /health # call the actuator /health endpoint
            port: 8080 # use the container port 8080
          initialDelaySeconds: 20 # will not get called until 45 seconds after the pod has been created
          timeoutSeconds: 10 # must respond within 1 second
          periodSeconds: 60 # run the probe every 10 seconds
          failureThreshold: 3 # if more than 3 probes fail, restart the container
        readinessProbe: # check if the apploication (or service) is ready to receive traffic
          httpGet: # this probe will use the http GET method
            path: /health # call the / endpoint to see if we're ready
            port: 8080 # call the container port 8080
          initialDelaySeconds: 30 # check as soon as the pod is 'live'
          periodSeconds: 10 # check every 10 seconds
          failureThreshold: 3 # fail after 3 bad attempts
          successThreshold: 1 # go to 'ready' after 1 successful check
        env: # Adds an ENV variable at runtime
          - name: MY_ENV_PARAMETER # Adds a specific ENV variable with the name 'MY_ENV_PARAMETER'.
            valueFrom: 
              configMapKeyRef: # Tells Kubernetes to get the ENV variable's value from a config-map key.
                name: myconfigmap # Takes the data from the Kubernetes registered config-map called `myconfig`.
                key: myparameter # Gives the variable the value associated with the key 'myparameter' in the config-map.
          - name: YOUR_HOST_IS
            valueFrom:
              configMapKeyRef:
                name: myconfigmap
                key: yourhostis
          - name: SPRING_PROFILES_ACTIVE
            valueFrom:
              configMapKeyRef:
                name: myconfigmap
                key: activeprofiles
          - name: VCAP_APPLICATION
            valueFrom:
              configMapKeyRef:
                name: myconfigmap
                key: vcapapplication
          - name: VCAP_SERVICES
            valueFrom:
              secretKeyRef:
                name: mysecret # Takes the data from the Kubernetes registered secret called `mysecret`
                key: vcap.services # Gives the variable the value assocuated with this key in the secret
          - name: DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: mysecret
                key: database.username
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysecret
                key: database.password
        volumeMounts:
          -  name: config-volume # We can also mount the same config-map as a disk volume if we like...
             mountPath: /config # The data in the config-map will appear under this mount path
      volumes:
        -  name: config-volume # Here we are creating the volume that is to be mounted
           configMap:
             name: myconfigmap # Here we are telling the volume to use the config-map 'myconfigmap' as the volume's contents
      # restartPolicy: never # Defaults to always